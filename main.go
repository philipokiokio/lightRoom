package main

import (
	"fmt"
	"github.com/go-chi/chi"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
	"github.com/go-chi/jwtauth"
	"github.com/joho/godotenv"
	"github.com/swaggo/http-swagger/v2"
	"lightRoom/api"
	"lightRoom/cache"
	"lightRoom/db"
	_ "lightRoom/docs" // docs is generated by Swag CLI, you have to import it.
	"lightRoom/models"
	"lightRoom/utils"
	"log"
	"net/http"
)

func registerAPI(router *chi.Mux) {
	// Public ROUTES

	router.Get("/", rootHandler)
	router.Route("/api/v1/auth", func(router chi.Router) {
		router.Post("/sign-up", api.CreateUser)
		router.Post("/login", api.Login)
		router.Post("/forgot-password", api.ForgotPassword)
		router.Post("/reset-password", api.PasswordReset)
		router.Post("/refresh", api.Refresh)
		router.Post("/account-verification", api.Verify)

		// Protected Routes (within the same /api/v1/auth block)
		router.Group(func(router chi.Router) {
			router.Use(utils.BearerTokenMiddleware)
			// AUTH MIDDLEWARE
			router.Use(jwtauth.Verifier(utils.TokenAuth))
			// AUTHENTICATOR
			router.Use(utils.LightRoomTicator)

			router.Get("/me", api.Me)
			router.Post("/logout", api.LogOut)
		})

	})
	router.Route("/api/v1/misc", func(router chi.Router) {

		router.Group(func(router chi.Router) {
			router.Use(utils.BearerTokenMiddleware)
			// AUTH MIDDLEWARE
			router.Use(jwtauth.Verifier(utils.TokenAuth))
			// AUTHENTICATOR
			router.Use(utils.LightRoomTicator)
			router.Post("/upload-file", api.UploadFile)
			router.Post("/delete-file", api.DeleteFile)
		})

	})

}

// Root godoc
// @Tags root
// @Summary The Root server of lightRoom
// @Description The Root server of lightRoom
// @Accept json
// @Produce json
// @Router / [get]
func rootHandler(writer http.ResponseWriter, request *http.Request) {
	writer.Header().Set("Content-Type", "application/json")
	writer.WriteHeader(http.StatusOK)
	writer.Write([]byte(`{"data":"LightRoom API","detail": "a clone of shutterstock built in go to be light weight"}`))
}

// @title LightRoom API
// @version 2.0
// @description This is a Go server for a spin of shutterstock built by Philip.
// @termsOfService http://swagger.io/terms/

// @contact.name philip
// @contact.url http://www.neemistudio.xyz
// @contact.email mailme@neemistudio.xyz

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:9090
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
func main() {
	//LOADING ENVIRONMENTAL VARIABLES
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	//CHECK CORE ENV IS PROVIDED
	utils.EnvInit()
	//DB INIT
	db.Init()
	models.Init()
	//Redis InIt
	cache.RedisInit(utils.Settings.RedisDsn)
	//Auth Init
	utils.AuthInit()
	// Initialize the validator instance
	api.InitializeValidator()
	//API ROUTER
	baseRouter := chi.NewRouter()
	//Mounted MIDDLEWARES
	baseRouter.Use(middleware.Logger)
	baseRouter.Use(middleware.Recoverer)
	//USING DEFAULT CORS OPTIONS
	baseRouter.Use(cors.Handler(
		cors.Options{
			AllowedOrigins:   []string{"*"},
			AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
			AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
			ExposedHeaders:   []string{"Link"},
			AllowCredentials: false,
			MaxAge:           300,
		}))
	baseRouter.Use(middleware.RealIP)

	// Mounted Routes
	registerAPI(baseRouter)
	//DEFAULT HANDLERS
	baseRouter.NotFound(func(writer http.ResponseWriter, request *http.Request) {
		log.Println(request.Method, request.RequestURI, http.StatusNotFound)
		writer.Header().Set("Content-Type", "application/json")
		writer.WriteHeader(http.StatusNotFound)
		writer.Write([]byte(`{ "detail": "Not found" }`))
		return
	})
	baseRouter.MethodNotAllowed(func(writer http.ResponseWriter, request *http.Request) {
		log.Println(request.Method, request.RequestURI, http.StatusNotFound)
		writer.Header().Set("Content-Type", "application/json")
		writer.WriteHeader(http.StatusMethodNotAllowed)
		writer.Write([]byte(`{ "detail": "Method not allowed" }`))
		return
	})

	swaggerDocUrl := fmt.Sprintf("http://localhost:%v/docs/doc.json", utils.Settings.Port)

	baseRouter.Get("/docs/*", httpSwagger.Handler(httpSwagger.URL(swaggerDocUrl))) //The url pointing to API definition

	port := utils.Settings.Port
	log.Printf("Listening on port :%s", port)
	http.ListenAndServe(fmt.Sprintf(":%v", port), baseRouter)
}
